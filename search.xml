<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NPM基础命令总结</title>
      <link href="2021/05/25/npm-ji-chu-ming-ling-zong-jie/"/>
      <url>2021/05/25/npm-ji-chu-ming-ling-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="NPM简介"><a href="#NPM简介" class="headerlink" title="NPM简介"></a><code>NPM</code>简介</h2><p><code>NPM</code>的全称是<code>Node Package Manager</code>，随同<code>NodeJS</code>一起安装的包管理工具，用于管理项目开发过程中的依赖（你可以将其类比于<code>Python</code>的<code>pip</code>工具），安装<code>NodeJS</code>的时候该工具会被自动安装。你可能还会困惑NodeJS是什么，我这里摘录了一段简介：</p><blockquote><p>Node.js是一个javascript运行环境。它让javascript可以开发后端程序，实现几乎其他后端语言实现的所有功能，可以与PHP、Java、Python、.NET、Ruby等后端语言平起平坐。<br>Nodejs是基于V8引擎，V8是Google发布的开源JavaScript引擎，本身就是用于Chrome浏览器的js解释部分，但是Ryan Dahl 这哥们，鬼才般的，把这个V8搬到了服务器上，用于做服务器的软件。</p></blockquote><h2 id="NPM常用命令"><a href="#NPM常用命令" class="headerlink" title="NPM常用命令"></a><code>NPM</code>常用命令</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> -v  <span class="token comment" spellcheck="true"># 查看npm版本</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">npm</span> -g  <span class="token comment" spellcheck="true"># 升级npm版本</span><span class="token function">npm</span> config list <span class="token comment" spellcheck="true"># 查看npm基本配置</span><span class="token function">npm</span> config get prefix  <span class="token comment" spellcheck="true"># 获取npm全局安装的目录</span><span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">"D:\nodejs\node_global"</span> <span class="token comment" spellcheck="true"># 设置全局包目录</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"D:\nodejs\node_cache"</span> <span class="token comment" spellcheck="true"># 设置缓存目录</span></code></pre><h3 id="NPM加速"><a href="#NPM加速" class="headerlink" title="NPM加速"></a><code>NPM</code>加速</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 配置`NPM`淘宝镜像源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 查看镜像源是否配置成功</span><span class="token function">npm</span> config get registry<span class="token comment" spellcheck="true"># 恢复镜像源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org</code></pre><h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 根据当前目录下的`package.json`安装依赖</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">(</span>with no args, <span class="token keyword">in</span> package dir<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 安装模块到项目目录下（以`gulp`为例）</span><span class="token function">npm</span> <span class="token function">install</span> gulp<span class="token comment" spellcheck="true"># 安装指定版本的模块到项目目录下（以`gulp`为例）</span><span class="token function">npm</span> <span class="token function">install</span> gulp@3.9.1<span class="token comment" spellcheck="true"># 安装命令简写</span><span class="token function">npm</span> i xxx<span class="token punctuation">(</span>npm <span class="token function">install</span> xxx<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 全局安装，模块将被下载安装到【全局目录】中</span><span class="token function">npm</span> <span class="token function">install</span> -g grunt<span class="token comment" spellcheck="true"># 本地安装，模块将被下载到当前目录中</span><span class="token function">npm</span> <span class="token function">install</span> grunt<span class="token comment" spellcheck="true"># -S，--save 将模块安装到项目目录下，并在package文件的dependencies节点写入依赖</span><span class="token function">npm</span> <span class="token function">install</span> gulp --save 或 <span class="token function">npm</span> <span class="token function">install</span> gulp -S<span class="token comment" spellcheck="true"># -D, --save-dev 将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖</span><span class="token function">npm</span> <span class="token function">install</span> gulp --save-dev 或 <span class="token function">npm</span> <span class="token function">install</span> gulp -D</code></pre><pre class=" language-markdown"><code class="language-markdown">npm install moduleName<span class="token list punctuation">1.</span> 安装模块到项目node_modules目录下。  <span class="token list punctuation">2.</span> 不会将模块依赖写入devDependencies或dependencies 节点。  <span class="token list punctuation">3.</span> 运行 npm install 初始化项目时不会下载模块。npm install -g moduleName<span class="token list punctuation">1.</span> 安装模块到全局，不会在项目node_modules目录中保存模块包。<span class="token list punctuation">2.</span> 不会将模块依赖写入devDependencies或dependencies 节点。<span class="token list punctuation">3.</span> 运行 npm install 初始化项目时不会下载模块。npm install -save moduleName<span class="token list punctuation">1.</span> 安装模块到项目node_modules目录下。<span class="token list punctuation">2.</span> 会将模块依赖写入dependencies 节点。<span class="token list punctuation">3.</span> 运行 npm install 初始化项目时，会将模块下载到项目目录下。<span class="token list punctuation">4.</span> 运行npm install --production或者注明NODE<span class="token italic"><span class="token punctuation">_</span>ENV变量值为production时，会自动下载模块到node<span class="token punctuation">_</span></span>modules目录中npm install -save-dev moduleName 命令<span class="token list punctuation">1.</span> 安装模块到项目node_modules目录下。<span class="token list punctuation">2.</span> 会将模块依赖写入devDependencies 节点。<span class="token list punctuation">3.</span> 运行 npm install 初始化项目时，会将模块下载到项目目录下。<span class="token list punctuation">4.</span> 运行npm install --production或者注明NODE<span class="token italic"><span class="token punctuation">_</span>ENV变量值为production时，不会自动下载模块到node<span class="token punctuation">_</span></span>modules目录中。</code></pre><blockquote><p>devDependencies 节点下的模块是我们在开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下，所以我们应该使用 -save 的形式安装。</p></blockquote><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall express  <span class="token comment" spellcheck="true"># 卸载模块</span><span class="token function">npm</span> update express  <span class="token comment" spellcheck="true"># 更新模块</span><span class="token function">npm</span> search express  <span class="token comment" spellcheck="true"># 搜索模块</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="2021/05/25/da-jian-ge-ren-bo-ke/"/>
      <url>2021/05/25/da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="安装和配置git"><a href="#安装和配置git" class="headerlink" title="安装和配置git"></a>安装和配置git</h3><p>git是一个广泛使用的版本管理工具，我们搭建的博客就依赖git进行管理，并且git还能够将我们的项目推送到github上供互联网上的所有人访问</p><p>安装git可以查看git官网提供的安装教程：<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">教程</a></p><p>如果你是第一次使用git，由于git在每次提交的时候都需要记录提交者的用户名和联系方式，因此需要对git进行简单的配置：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"John Doe"</span> <span class="token comment" spellcheck="true"># 用户名</span><span class="token function">git</span> config --global user.email johndoe@example.com <span class="token comment" spellcheck="true"># 邮箱地址</span></code></pre><blockquote><p><code>--global</code>表示全局配置，该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p><p>上述的用户名和邮箱地址只是起标记作用，并不用是真实的用户名或者邮箱，为了方便起见，我们采用全局配置的方式</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global core.editor vim <span class="token comment" spellcheck="true"># 配置git默认调用的文本编辑器</span></code></pre><blockquote><p><code>git</code>默认使用的文本编辑器一般是<code>nano</code>，这个文本编辑器对我来说比较难用，<code>vim</code>是在类<code>Unix</code>系统上十分常用的一个文本编辑器，后续我会出一篇博客介绍我在使用<code>vim</code>的过程中常用的一些命令</p></blockquote><h3 id="安装和配置NodeJS"><a href="#安装和配置NodeJS" class="headerlink" title="安装和配置NodeJS"></a>安装和配置NodeJS</h3><p><code>Hexo</code>基于<code>NodeJS</code>开发，<code>NodeJS</code>的下载地址：<a href="https://nodejs.org/zh-cn/download/">下载地址</a></p><p>下载的时候根据自己的系统选择相应的版本即可</p><p><code>NPM</code>在安装包的时候默认采用的是国外的源，为了加快下载速度，推荐配置为国内源：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org <span class="token comment" spellcheck="true"># 配置淘宝源</span><span class="token function">npm</span> config get registry <span class="token comment" spellcheck="true"># 验证是否配置成功</span></code></pre><h3 id="安装Hexo脚手架"><a href="#安装Hexo脚手架" class="headerlink" title="安装Hexo脚手架"></a>安装Hexo脚手架</h3><p>脚手架是编程开发中的一个形象比喻，现实世界中的脚手架指的是建筑中使用的设备工具，为了保证各施工过程顺利进行而搭设的工作平台。编程中的脚手架就是为了提高开发效率，帮助我们快速搭建，管理工程的工具。</p><p>安装<code>hexo-cli</code>：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli </code></pre><blockquote><p><code>cli</code>指的是<code>Command Line Interface</code>，是脚手架项目中提供的一些预定义好的命令，这些命令相当于脚手架项目提供的接口，我们用户只需要使用这些接口，而不需要面对复杂的项目结构</p></blockquote><h2 id="本地使用"><a href="#本地使用" class="headerlink" title="本地使用"></a>本地使用</h2><p>创建一个存放博客的目录：</p><pre class=" language-bash"><code class="language-bash">hexo init blog <span class="token comment" spellcheck="true"># 在当前路径下创建一个blog的目录</span></code></pre><p><code>Hexo</code>的目录结构：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">|</span>-- _config.yml <span class="token comment" spellcheck="true"># 网站的全局配置，可以配置网站的title，author等</span><span class="token operator">|</span>-- package.json <span class="token comment" spellcheck="true"># npm相关，记录项目的依赖</span><span class="token operator">|</span>-- scaffolds <span class="token comment" spellcheck="true"># 模板文件夹</span><span class="token operator">|</span>-- <span class="token function">source</span>   <span class="token operator">|</span>-- _posts <span class="token comment" spellcheck="true"># 存放博客的markdown文件</span><span class="token operator">|</span>-- public <span class="token comment" spellcheck="true"># 生成的静态文件，hexo clean会删除，hexo g会编译生成</span><span class="token operator">|</span>-- themes <span class="token comment" spellcheck="true"># 网站的主题，后续的自定义配置主要是针对该文件夹</span><span class="token operator">|</span>-- .gitignore <span class="token comment" spellcheck="true"># git相关，声明不被git管理的文件</span></code></pre><p>启动我们的博客查看一下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> bloghexo g <span class="token comment" spellcheck="true"># generate：生成静态文件（public目录）</span>hexo s <span class="token comment" spellcheck="true"># server：在本地生成预览</span></code></pre><p>使用浏览器打开执行完<code>hexo s</code>命令返回的地址（默认是localhost:4000），就可以看到我们的博客已经搭建成功了，之后如果想要自己写博客的时候只需要执行一下命令</p><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"article_title"</span> </code></pre><p>执行结束上述命令会在<code>_posts</code>目录下创建一个<code>markdown</code>文件，该文件的<code>front-matter</code>部分是由<code>hexo</code>进行解析的，后面只需要像写<code>markdown</code>一样编辑这个文件就可以了</p><p>编辑结束之后，执行以下命令重新打开浏览器查看就可以看到更新后的内容了：</p><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token comment" spellcheck="true"># 清除缓存，不清除部分修改可能不会立刻展示出来</span>hexo g <span class="token operator">&amp;&amp;</span> hexo s</code></pre><h2 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h2><p>经过上述步骤，我们就有了一个可以在本地预览的网站了，接下来要做的就是要把我们的网站部署到因特网上，让我们的网站可以被更多的人访问</p><p>1、创建<code>github</code>仓库</p><p>此处假设你已经有了<code>github</code>账号，因为该账号的注册过程和其他网站类似，所以我也就不做介绍了，你需要在<code>github</code>创建一个<code>username.github.io</code>的仓库（<code>username</code>是你的<code>github</code>用户名），这个是固定写法，如果不是这个名字，则后续的部署无法成功</p><p>2、将本机的公钥存储在你的<code>github</code>账户上</p><p>这一步是为了推送的方便，如果采用<code>git</code>协议，可以采用不对称加密的方式进行用户验证，不需要用户手动输入密码（<a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">不对称加密</a>），首先确认自己是否已经拥有密钥：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~/.ssh$ <span class="token function">ls</span>authorized_keys2  id_dsa       known_hostsconfig            id_dsa.pub</code></pre><p>如果你的用户目录下的<code>.ssh</code>文件夹中已经有了上述内容，则可以跳过创建密钥的步骤，否则执行以下命令创建密钥：</p><pre class=" language-bash"><code class="language-bash">$ ssh-keygen -oGenerating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/home/schacon/.ssh/id_rsa<span class="token punctuation">)</span>:Created directory <span class="token string">'/home/schacon/.ssh'</span><span class="token keyword">.</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved <span class="token keyword">in</span> /home/schacon/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> /home/schacon/.ssh/id_rsa.pub.The key fingerprint is:d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local</code></pre><p>上述命令会在用户目录的<code>.ssh</code>文件夹中创建以上文件，接下来我们只需要将<code>id_rsa.pub</code>文件中的内容添加到你的<code>github</code>的<code>SSH keys</code>中即可</p><blockquote><p><code>git</code>协议采用非对称加密的方式，将公钥存储在你的<code>github</code>账户中，私钥存储在自己的电脑中，当你想要对<code>github</code>上的仓库进行修改的时候，会直接通过验证你本地的私钥和<code>github</code>上的公钥是否是配对的，如果是配对的，就允许你的修改。</p></blockquote><p>3、安装git部署插件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save <span class="token comment" spellcheck="true"># --save表示将依赖写入到package.json中</span></code></pre><p>4、关联博客目录和<code>github</code>仓库</p><p>打开站点的配置文件<code>_config.yml</code>文件，搜索<code>deploy</code>，按照以下步骤进行配置</p><pre class=" language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git  branch: master</code></pre><p>5、将博客目录推送到<code>github</code>仓库中</p><pre class=" language-bash"><code class="language-bash">hexo d <span class="token comment" spellcheck="true"># deploy，部署到配置中指定的github仓库</span></code></pre><p>6、通过<code>username.github.io</code>访问你的博客</p><h2 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h2><p>如果你不喜欢<code>hexo</code>的默认主题，则你可以对其进行更改，这里提供了以下开发者贡献的<code>hexo</code>主题（<a href="https://hexo.io/themes/">https://hexo.io/themes/</a>），我才用的是一位中文开发者提供的主题<code>hexo-matery</code>，作者给出了保姆级的<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">教程</a>，如果你也喜欢这个主题的话，可以查看这个教程</p><p>补充：其实搭建博客的过程十分简单，写博客的话只需要掌握<code>markdown</code>语法，下次我会发布<code>markdown</code>语法的简单总结和推荐我常用的<code>markdown</code>编辑器</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
